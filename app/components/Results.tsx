import { motion } from "framer-motion";
import { fadeInUp, fadeInLeft, fadeInRight, staggerContainer, hoverScale } from "./Animations";
import Summary from "./Summary";
import ATS from "./ATS";
import Details from "./Details";
import { useState } from "react";

interface ResultsProps {
  feedback: Feedback | null;
  imageUrl?: string;
  resumeUrl?: string;
}

const Results = ({ feedback, imageUrl, resumeUrl }: ResultsProps) => {
  const [isDownloading, setIsDownloading] = useState(false);

  const generateReport = () => {
    if (!feedback) return '';

    const report = `
# Resume Analysis Report
Generated on: ${new Date().toLocaleDateString()}

## Overall Score: ${feedback.overallScore}/100

## Summary
- Tone & Style: ${feedback.toneAndStyle.score}/100
- Content: ${feedback.content.score}/100
- Structure: ${feedback.structure.score}/100
- Skills: ${feedback.skills.score}/100

## ATS Score: ${feedback.ATS.score || 0}/100

### ATS Suggestions:
${feedback.ATS.tips?.map((tip: any) => `- ${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}`).join('\n') || 'No specific ATS tips available.'}

## Detailed Analysis

### Tone & Style Analysis (${feedback.toneAndStyle.score}/100)
${feedback.toneAndStyle.tips?.map((tip: any) => `
- ${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}
  ${tip.explanation}
`).join('\n') || 'No tone and style tips available.'}

### Content Analysis (${feedback.content.score}/100)
${feedback.content.tips?.map((tip: any) => `
- ${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}
  ${tip.explanation}
`).join('\n') || 'No content tips available.'}

### Structure Analysis (${feedback.structure.score}/100)
${feedback.structure.tips?.map((tip: any) => `
- ${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}
  ${tip.explanation}
`).join('\n') || 'No structure tips available.'}

### Skills Analysis (${feedback.skills.score}/100)
${feedback.skills.tips?.map((tip: any) => `
- ${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}
  ${tip.explanation}
`).join('\n') || 'No skills tips available.'}

---
Report generated by ResuMate - AI-Powered Resume Analysis
    `.trim();

    return report;
  };

  const downloadReport = async () => {
    if (!feedback) return;
    
    setIsDownloading(true);
    
    try {
      // Create a new window for PDF generation
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        throw new Error('Could not open print window');
      }

      const report = generateReport();
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Resume Analysis Report</title>
          <style>
            body {
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
              background: white;
            }
            .header {
              text-align: center;
              border-bottom: 3px solid #3b82f6;
              padding-bottom: 20px;
              margin-bottom: 30px;
            }
            .header h1 {
              color: #1e40af;
              margin: 0;
              font-size: 2.5em;
            }
            .header p {
              color: #6b7280;
              margin: 10px 0 0 0;
            }
            .score-section {
              background: linear-gradient(135deg, #3b82f6, #8b5cf6);
              color: white;
              padding: 20px;
              border-radius: 10px;
              text-align: center;
              margin: 20px 0;
            }
            .score-section h2 {
              margin: 0 0 10px 0;
              font-size: 2em;
            }
            .score-grid {
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
              gap: 15px;
              margin-top: 20px;
            }
            .score-item {
              background: rgba(255, 255, 255, 0.2);
              padding: 15px;
              border-radius: 8px;
              text-align: center;
            }
            .score-item h3 {
              margin: 0 0 5px 0;
              font-size: 0.9em;
              opacity: 0.9;
            }
            .score-item .score {
              font-size: 1.5em;
              font-weight: bold;
            }
            .section {
              margin: 30px 0;
              padding: 20px;
              background: #f8fafc;
              border-radius: 10px;
              border-left: 4px solid #3b82f6;
            }
            .section h2 {
              color: #1e40af;
              margin: 0 0 15px 0;
              font-size: 1.5em;
            }
            .section h3 {
              color: #374151;
              margin: 20px 0 10px 0;
              font-size: 1.2em;
            }
            .tips-list, .strengths-list, .improvements-list, .recommendations-list {
              list-style: none;
              padding: 0;
            }
            .tips-list li, .strengths-list li, .improvements-list li, .recommendations-list li {
              background: white;
              margin: 8px 0;
              padding: 12px 15px;
              border-radius: 6px;
              border-left: 3px solid #10b981;
              box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            }
            .footer {
              text-align: center;
              margin-top: 40px;
              padding-top: 20px;
              border-top: 2px solid #e5e7eb;
              color: #6b7280;
            }
            @media print {
              body { margin: 0; padding: 15px; }
              .section { break-inside: avoid; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Resume Analysis Report</h1>
            <p>Generated on ${new Date().toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}</p>
          </div>

          <div class="score-section">
            <h2>Overall Score: ${feedback.overallScore}/100</h2>
            <div class="score-grid">
              <div class="score-item">
                <h3>Tone & Style</h3>
                <div class="score">${feedback.toneAndStyle.score}/100</div>
              </div>
              <div class="score-item">
                <h3>Content</h3>
                <div class="score">${feedback.content.score}/100</div>
              </div>
              <div class="score-item">
                <h3>Structure</h3>
                <div class="score">${feedback.structure.score}/100</div>
              </div>
              <div class="score-item">
                <h3>Skills</h3>
                <div class="score">${feedback.skills.score}/100</div>
              </div>
            </div>
          </div>

          <div class="section">
            <h2>ATS Compatibility Score: ${feedback.ATS.score || 0}/100</h2>
            <h3>ATS Optimization Tips:</h3>
            <ul class="tips-list">
              ${feedback.ATS.tips?.map((tip: any) => `
                <li>
                  <strong>${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}</strong>
                </li>
              `).join('') || '<li>No specific ATS tips available.</li>'}
            </ul>
          </div>

          <div class="section">
            <h2>Tone & Style Analysis (${feedback.toneAndStyle.score}/100)</h2>
            <ul class="tips-list">
              ${feedback.toneAndStyle.tips?.map((tip: any) => `
                <li>
                  <strong>${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}</strong>
                  <br><span style="color: #6b7280; font-size: 0.9em;">${tip.explanation}</span>
                </li>
              `).join('') || '<li>No tone and style tips available.</li>'}
            </ul>
          </div>

          <div class="section">
            <h2>Content Analysis (${feedback.content.score}/100)</h2>
            <ul class="tips-list">
              ${feedback.content.tips?.map((tip: any) => `
                <li>
                  <strong>${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}</strong>
                  <br><span style="color: #6b7280; font-size: 0.9em;">${tip.explanation}</span>
                </li>
              `).join('') || '<li>No content tips available.</li>'}
            </ul>
          </div>

          <div class="section">
            <h2>Structure Analysis (${feedback.structure.score}/100)</h2>
            <ul class="tips-list">
              ${feedback.structure.tips?.map((tip: any) => `
                <li>
                  <strong>${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}</strong>
                  <br><span style="color: #6b7280; font-size: 0.9em;">${tip.explanation}</span>
                </li>
              `).join('') || '<li>No structure tips available.</li>'}
            </ul>
          </div>

          <div class="section">
            <h2>Skills Analysis (${feedback.skills.score}/100)</h2>
            <ul class="tips-list">
              ${feedback.skills.tips?.map((tip: any) => `
                <li>
                  <strong>${tip.type === 'good' ? '✓' : '⚠'} ${tip.tip}</strong>
                  <br><span style="color: #6b7280; font-size: 0.9em;">${tip.explanation}</span>
                </li>
              `).join('') || '<li>No skills tips available.</li>'}
            </ul>
          </div>

          <div class="footer">
            <p><strong>Report generated by ResuMate - AI-Powered Resume Analysis</strong></p>
            <p>Visit our platform for more resume optimization tools and insights.</p>
          </div>
        </body>
        </html>
      `;

      printWindow.document.write(htmlContent);
      printWindow.document.close();
      
      // Wait for content to load, then trigger print
      printWindow.onload = () => {
        setTimeout(() => {
          printWindow.print();
          printWindow.close();
        }, 500);
      };
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      // Fallback to text download if PDF generation fails
      const report = generateReport();
      const blob = new Blob([report], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `resume-analysis-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } finally {
      setIsDownloading(false);
    }
  };

  if (!feedback) {
    return (
      <motion.div
        className="flex items-center justify-center min-h-[400px]"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.6 }}
      >
        <motion.div
          className="text-center"
          animate={{ scale: [1, 1.05, 1] }}
          transition={{ duration: 2, repeat: Infinity }}
        >
          <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
          </div>
          <p className="text-gray-600">Loading analysis...</p>
        </motion.div>
      </motion.div>
    );
  }

  return (
    <motion.div
      className="grid grid-cols-1 lg:grid-cols-2 gap-8 min-h-screen"
      initial="initial"
      animate="animate"
      variants={staggerContainer}
    >
      {/* Resume Preview */}
      <motion.div
        variants={fadeInLeft}
        className="lg:sticky lg:top-8 lg:h-fit"
      >
        <div className="bg-white/80 backdrop-blur-sm rounded-3xl p-6 shadow-xl border border-white/20">
          <h3 className="text-2xl font-bold text-gray-900 mb-6">Resume Preview</h3>
          {imageUrl && resumeUrl && (
            <motion.div
              className="relative group"
              whileHover={{ scale: 1.02 }}
              transition={{ type: "spring", stiffness: 300, damping: 30 }}
            >
              <a href={resumeUrl} target="_blank" rel="noopener noreferrer">
                <motion.img
                  src={imageUrl}
                  alt="Resume preview"
                  className="w-full h-auto rounded-2xl shadow-lg group-hover:shadow-xl transition-shadow duration-300"
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.6, delay: 0.2 }}
                />
                <motion.div
                  className="absolute inset-0 bg-black/0 group-hover:bg-black/10 rounded-2xl transition-colors duration-300 flex items-center justify-center"
                  initial={{ opacity: 0 }}
                  whileHover={{ opacity: 1 }}
                >
                  <div className="bg-white/90 backdrop-blur-sm rounded-full p-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <svg className="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                    </svg>
                  </div>
                </motion.div>
              </a>
            </motion.div>
          )}
        </div>
      </motion.div>

      {/* Analysis Results */}
      <motion.div
        variants={fadeInRight}
        className="space-y-8"
      >
        <motion.div variants={fadeInUp}>
          <h2 className="text-4xl font-bold bg-gradient-to-r from-gray-900 via-blue-900 to-purple-900 bg-clip-text text-transparent mb-2">
            Analysis Results
          </h2>
          <p className="text-gray-600 text-lg">
            Comprehensive feedback to help you improve your resume
          </p>
        </motion.div>

        <motion.div
          variants={staggerContainer}
          className="space-y-8"
        >
          {/* Summary Section */}
          <motion.div
            variants={fadeInUp}
            className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl border border-white/20"
            whileHover={{ y: -5 }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mr-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-gray-900">Summary</h3>
            </div>
            <Summary feedback={feedback} />
          </motion.div>

          {/* ATS Score Section */}
          <motion.div
            variants={fadeInUp}
            className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl border border-white/20"
            whileHover={{ y: -5 }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center mr-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-gray-900">ATS Score</h3>
            </div>
            <ATS score={feedback.ATS.score || 0} suggestions={feedback.ATS.tips || []} />
          </motion.div>

          {/* Detailed Analysis Section */}
          <motion.div
            variants={fadeInUp}
            className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-xl border border-white/20"
            whileHover={{ y: -5 }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <div className="flex items-center mb-6">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center mr-4">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-gray-900">Detailed Analysis</h3>
            </div>
            <Details feedback={feedback} />
          </motion.div>
        </motion.div>

        {/* Enhanced Action Buttons */}
        <motion.div
          variants={fadeInUp}
          className="flex flex-col sm:flex-row gap-4 pt-8"
        >
          <motion.button
            className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white py-4 px-8 rounded-full font-semibold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
            whileHover={{ scale: isDownloading ? 1 : 1.02 }}
            whileTap={{ scale: isDownloading ? 1 : 0.98 }}
            onClick={downloadReport}
            disabled={isDownloading}
          >
            {isDownloading ? (
              <>
                <motion.div
                  className="w-5 h-5 border-2 border-white border-t-transparent rounded-full mr-2"
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                />
                Generating Report...
              </>
            ) : (
              <>
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Download Report
              </>
            )}
          </motion.button>
          <motion.button
            className="flex-1 bg-white/80 backdrop-blur-sm text-gray-700 py-4 px-8 rounded-full font-semibold border border-gray-200 shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => window.location.href = '/upload'}
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
            </svg>
            Upload Another Resume
          </motion.button>
        </motion.div>
      </motion.div>
    </motion.div>
  );
};

export default Results;
